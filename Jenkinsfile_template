import static java.util.UUID.randomUUID
import org.csanchez.jenkins.plugins.kubernetes.pipeline.PodTemplateAction

def uuid = randomUUID() as String
def label = uuid.take(8)

def clearTemplateNames() {
  currentBuild.rawBuild.getAction( PodTemplateAction.class )?.stack?.clear()
}

clearTemplateNames()

podTemplate(label: "pod-${label}",  instanceCap: 10,containers: [
    containerTemplate(
    name: 'docker',
    image: 'docker',
    ttyEnabled: true,
    command: 'cat',
    resourceRequestCpu: '1000m',
    resourceLimitCpu: '2000m',
    resourceRequestMemory: '1000Mi',
    resourceLimitMemory: '2000Mi'
    )],
    volumes: [
     hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
   ]
    ) {
    node("pod-${label}") {
         parameters {
            string(name: image_name)
        }
        stage('pull image') {
            container('docker') {
                       withCredentials([file(credentialsId: 'key',variable:'key')]) {
                      sh """
                        docker login -u _json_key --password-stdin * < ${key}
                        docker pull *
                        """
                    }
                stage('list docker images'){
                    sh 'docker images'
                }
            }
    }
  }
}  
podTemplate(label: "pod-${label}", containers: [
    containerTemplate(
    name: 'slave-base',
    image: *,
    ttyEnabled: true,
    command: 'cat',
    resourceRequestCpu: '1000m',
    resourceLimitCpu: '2000m',
    resourceRequestMemory: '1000Mi',
    resourceLimitMemory: '2000Mi'
    )]) {
    node("pod-${label}") {
        parameters {
            choice(choices: [name: customer_name)
            string(name: start_date)
            string(name: end_date)
            choice(choices: [monthly, weekly, daily], name: report_type)
            choice(choices: [on, off], name: discount)
            string(name: emails)
        }
         stage('run job'){
            container('slave-base') {
                    sh 'python --version'
                    sh 'pip3 list'
                    checkout([
                        $class: 'GitSCM', branches: [[name: '*/master']],
                            userRemoteConfigs: [[url:* ,credentialsId:'key']]
                          ])
                    try{
					   sh "python run.py -"
                    }
                    catch(e){
                      script { 
                            emailext (
                            body: '${DEFAULT_CONTENT}',
                             recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                             subject: '${DEFAULT_SUBJECT}',
                             to:*
                             )
                        }  
                    }
            }
       }
   }
}
