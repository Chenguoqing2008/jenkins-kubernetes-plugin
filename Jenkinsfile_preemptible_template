import static java.util.UUID.randomUUID
import org.csanchez.jenkins.plugins.kubernetes.pipeline.PodTemplateAction

def uuid = randomUUID() as String
def label = uuid.take(8)

def clearTemplateNames() {
  currentBuild.rawBuild.getAction( PodTemplateAction.class )?.stack?.clear()
}

clearTemplateNames()

podTemplate(label: "pod-${label}", yaml: """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-volume
  nodeSelector:
    percolata.preemptible: "yes"
    percolata.cpu: "one"
  volumes:
  - name: docker-volume
    hostPath:
      path: /var/run/docker.sock
    """
    ){
    node("pod-${label}") {
         parameters {
            string(name: image_name)
        }
        stage('pull image') {
            container('docker') {
                       withCredentials([file(credentialsId: 'google_key',variable:'gcp_key')]) {
                      sh """
                        docker login -u _json_key --password-stdin https://gcr.io < ${gcp_key}
                        docker pull gcr.io/faas-prod/jenkins-slave:1.1 
                        """
                    }
                stage('list docker images'){
                    sh 'docker images'
                }
            }
    }
  }
}  
podTemplate(label: "pod-${label}",  instanceCap: 10, containers: yaml: """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: base
    image: "$jenkins_image"
    command:
    - cat
    tty: true
  nodeSelector:
    percolata.preemptible: "yes"
    percolata.cpu: "one"
    """
    ) {
    node("pod-${label}") {
        parameters {
            choice(choices: [RiteAid, 'American Freight', Sugarfina], name: customer_name)
            string(name: start_date)
            string(name: end_date)
            choice(choices: [monthly, weekly, daily], name: report_type)
            choice(choices: [on, off], name: discount)
            string(name: emails)
        }
         stage('run job'){
            container('slave-base') {
                    sh 'python --version'
                    sh 'pip3 list'
                    checkout([
                        $class: 'GitSCM', branches: [[name: '*/migrate_new']],
                            userRemoteConfigs: [[url: 'git@bitbucket.org:percolata/billing.git',credentialsId:'bitbucket_key']]
                          ])
                    try{
					   sh "python run.py --customer_name \"${params.customer_name}\" --report_type ${params.report_type} \
					  --start_date ${params.start_date} --end_date ${params.end_date} --discount ${params.discount} --emails ${params.emails}"
                    }
                    catch(e){
                      script { 
                            emailext (
                            body: '${DEFAULT_CONTENT}',
                             recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                             subject: '${DEFAULT_SUBJECT}',
                             to: 'robin.chen@percolata.com'
                             )
                        }  
                    }
            }
       }
   }
}